#!/usr/bin/env bash
#
# Docker HTTP proxy wrapper script
#
# Copyright (c) 2016 Tomas Gerulaitis <t.gerulaitis@gmail.com>
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

########################################
# Variables
########################################

script=${0##*/}
command=$1

name="http-proxy"
image_name="codekitchen/dinghy-http-proxy"
certs_dir=$HOME/.docker/ssl
status=$(docker inspect --format "{{ .State.Running }}" $name 2> /dev/null)

color_reset="\033[0m"
color_positive="\033[32m"
color_negative="\033[31m"
color_neutral="\033[33m"

########################################
# Functions
########################################

# Print an informational message
function info {
    echo -e "${color_reset}$@"
}

# Print a success message
function success {
    echo -e "${color_positive}$@${color_reset}"
}

# Print an error message
function error {
    echo -e "${color_negative}$@${color_reset}" >&2
}

# Print an error message and exit
function fail {
    echo -e "${color_negative}$@${color_reset}" >&2
    exit 1
}

########################################
# Usage
########################################

usage="\
Usage:
    $script <command>

Available commands:
    name     Print out the name of the HTTP proxy container.
    status   Print out the status of the HTTP proxy container.
    config   Print out the current Nginx configuration.
    start    Start the HTTP proxy container, creating it if necessary.
    stop     Stop the HTTP proxy container.
    rm       Destroy a stopped HTTP proxy container, including its volumes.

Description:
    $script is a wrapper to easily manage an Nginx proxy container. The
    container, running $image_name, accepts incoming HTTP and HTTPS requests
    and passes them to the appropriate docker container based on the request
    Host header and the VIRTUAL_HOST container environment variable.

    For HTTPS requests, the container uses an appropriate SSL certificate
    mounted from $certs_dir.

    For more information on the docker HTTP proxy container, see
    https://github.com/jwilder/nginx-proxy

Author:
    Tomas Gerulaitis
    http://tgerulaitis.com/
    t.gerulaitis@gmail.com
"

########################################
# Main
########################################

case "$command" in
start)
    case "$status" in
        true)
            fail "Proxy container is already running!"
            ;;
        false)
            docker start $name \
            && success "Proxy container started"
            ;;
        *)
            docker run -d \
                -p 80:80 \
                -p 443:443 \
                -v $certs_dir:/etc/nginx/certs \
                -v /var/run/docker.sock:/tmp/docker.sock \
                -e CONTAINER_NAME=$name \
                --restart always \
                --name $name \
                $image_name \
            && success "Proxy container created"
            ;;
    esac
    ;;
stop)
    if [ "$status" == "true" ]; then
        docker stop $name \
        &&  success "Proxy container stopped"
    else
        fail "Proxy container is not running!"
    fi
    ;;
rm)
    if [ -n "$status" ]; then
        docker rm -v $name
    else
        fail "Nothing to remove!"
    fi
    ;;
name)
    echo $name
    ;;
status)
    case "$status" in
        true)
            info "Proxy container is running"
            ;;
        false)
            info "Proxy container is stopped"
            ;;
        *)
            info "Proxy container has not been setup"
            ;;
    esac
    ;;
config)
    if [ "$status" == "true" ]; then
        docker exec $name cat /etc/nginx/conf.d/default.conf
    else
        fail "Proxy inactive!"
    fi
    ;;
*)
    fail "$usage"
    ;;
esac

exit 0
